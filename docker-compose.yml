version: "3.8"

services:
  shop:
    container_name: shop
    build:
      context: .
      dockerfile: ./docker/shop/Dockerfile
    volumes:
      - ./shop:/app
    networks:
      - shop_db_network
    ports:
      - "8000:8000"
    depends_on:
      - db_shop
    environment:
      DB_NAME: "shop"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_shop"
      DB_PORT: "5432"
    restart: on-failure


#  storage:
#    container_name: storage
#    build:
#      context: .
#      dockerfile: ./docker/storage/Dockerfile
#    volumes:
#      - ./storage:/app
#    networks:
#      - storage_db_network
#    ports:
#      - "8001:8000"
#    depends_on:
#      - db_storage
#    environment:
#      DB_NAME: "storage"
#      DB_USER: "postgres"
#      DB_PASSWORD: "postgres"
#      DB_HOST: "db_storage"
#      DB_PORT: "5432"
#    restart: on-failure
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
#      interval: 1m
#      timeout: 5s
#      retries: 2

  db_shop:
    container_name: db_shop
    image: postgres:14-alpine
    volumes:
      - db_shop_volume:/var/lib/postgresql/data
    networks:
      - shop_db_network
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'shop'

#  db_storage:
#    container_name: db_storage
#    image: postgres:14-alpine
#    volumes:
#      - db_storage_volume:/var/lib/postgresql/data
#    networks:
#      - storage_db_network
#    expose:
#      - 5432
#    restart: on-failure
#    environment:
#      POSTGRES_USER: 'postgres'
#      POSTGRES_PASSWORD: 'postgres'
#      POSTGRES_DB: 'storage'


networks:
  shop_db_network:
  storage_db_network:

volumes:
  db_shop_volume:
  db_storage_volume: